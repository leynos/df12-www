locals {
  logs_bucket_name = "${replace(lower(replace(trimsuffix(var.domain_name, "."), "*.", "")), "_", "-")}-logs"
}

resource "aws_s3_bucket" "logs" {
  bucket        = local.logs_bucket_name
  force_destroy = var.force_destroy_logs
  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm     = var.sse_algorithm
        kms_master_key_id = var.sse_algorithm == "aws:kms" ? var.sse_kms_key_id : null
      }
    }
  }

  lifecycle {
    precondition {
      condition     = var.sse_algorithm != "aws:kms" || var.sse_kms_key_id != null
      error_message = "sse_kms_key_id must be provided when sse_algorithm == \"aws:kms\""
    }
  }
}

resource "aws_s3_bucket_public_access_block" "logs" {
  bucket                  = aws_s3_bucket.logs.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_lifecycle_configuration" "logs" {
  bucket = aws_s3_bucket.logs.id

  rule {
    id     = "expire-logs"
    status = "Enabled"

    expiration {
      days = var.log_retention_days
    }

    abort_incomplete_multipart_upload {
      days_after_initiation = 7
    }
  }
}
